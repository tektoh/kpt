Parse.initialize("<%= APPLICATION_ID %>", "<%= JAVASCRIPT_KEY %>");

window.currentUser = Parse.User.current();

window.AppRouter = Parse.Router.extend({
  routes: {
    '': 'index',
    'signup': 'signup',
    'login': 'login',
    'kpt?id=:id': 'kpt'
  },
  index: function() {
    if (!currentUser) {
      location.href = '/login';
    }
    var logoutButton = new LogoutButtonView();
    var newKptFormView = new NewKptFormView();
  },
  signup: function() {
    var signupFormView = new SignupFormView();
  },
  login: function() {
    var loginForm = new LoginFormView();
  },
  kpt: function(id) {
    if (!currentUser) {
      location.href = '/login';
    }
    var Kpt = Parse.Object.extend("Kpt");
    var query = new Parse.Query(Kpt);
    query.equalTo('objectId', id);
    query.first({
      success: function(kpt) {

        var kptTitleView = new KptTitleView({
          model: kpt
        });

        var keepListView = new CardListView({
          el: '#keepList',
          model: kpt
        });
        var problemListView = new CardListView({
          el: '#problemList',
          model: kpt
        });
        var tryListView = new CardListView({
          el: '#tryList',
          model: kpt
        });

        var kptMarkdownView = new KptMarkdownView({
          model: kpt
        });

        window.renderAllListView = function() {
          keepListView.render();
          problemListView.render();
          tryListView.render();
        }
      }
    });
  },
});

$(function() {
  var router = new AppRouter();
  Parse.history.start({pushState: true});
});

function showErrorMessage(object, error) {
  alert("Error: " + error.code + " " + error.message);
}

window.LogoutButtonView = Parse.View.extend({
  el: '.logoutButton',
  events: {
    'click': 'logout'
  },
  logout: function() {
    Parse.User.logOut();
    location.href = '/login';
  }
});

window.SignupFormView = Parse.View.extend({
  el: '.signupForm',
  events: {
    'submit': 'signup'
  },
  signup: function() {
    var user = new Parse.User();
    user.set("username", this.$('#inputUsername').val());
    //user.set("email", this.$('#inputEmail').val());
    user.set("password", this.$('#inputPassword').val());
    user.signUp(null, {
      success: function() {
        location.href = '/';
      },
      error: showErrorMessage
    });
    return false;
  }
});

window.LoginFormView = Parse.View.extend({
  el: '.loginForm',
  events: {
    'submit': 'login'
  },
  login: function() {
    Parse.User.logIn(this.$('#inputUsername').val(), this.$('#inputPassword').val(), {
      success: function(user) {
        location.href = '/';
      },
      error: showErrorMessage
    });
    return false;
  }
});

window.NewKptFormView = Parse.View.extend({
  el: '.newKptForm',
  events: {
    'submit': 'newKpt'
  },
  initialize: function() {
    this.kptListView = new KptListView();
    this.kptListView.render();
  },
  newKpt: function() {
    var Kpt = Parse.Object.extend("Kpt");
    var query = new Parse.Query(Kpt);

    var k = null,
        p = null,
        t = null;

    query.addDescending('createdAt');
    query.first({
      success: _.bind(function(results) {
        if (!results) {
          this.saveKpt([], [], []);
          return;
        }

        results.relation('keep').query().find({
          success: _.bind(function(results) {
            k = results;
            if (k && p && t) {
              this.saveKpt(k, p, t);
            }
          }, this),
          error: showErrorMessage
        });

        results.relation('problem').query().find({
          success: _.bind(function(results) {
            p = results;
            if (k && p && t) {
              this.saveKpt(k, p, t);
            }
          }, this),
          error: showErrorMessage
        });

        results.relation('try').query().find({
          success: _.bind(function(results) {
            t = results;
            if (k && p && t) {
              this.saveKpt(k, p, t);
            }
          }, this),
          error: showErrorMessage
        });

      }, this),
      error: showErrorMessage
    });

    return false;
  },
  saveKpt: function(k, p, t) {
    var Kpt = Parse.Object.extend("Kpt");
    var kpt = new Kpt();
    kpt.set('createdBy', currentUser);
    kpt.set('title', this.$('.newKptTitle').val());

    _.each(k, function(card) {
      this.add(card);
    }, kpt.relation('keep'));

    _.each(p, function(card) {
      this.add(card);
    }, kpt.relation('problem'));

    _.each(t, function(card) {
      this.add(card);
    }, kpt.relation('try'));

    kpt.save(null, {
      success: _.bind(function(kpt) {
        location.href = '/kpt?id=' + kpt.id
      }, this),
      error: showErrorMessage
    });

  }
});

window.KptTitleView = Parse.View.extend({
  el: '.kptTitle',
  events: {
    'click .kptTitleText': 'editTitle',
    'submit .editKptTitleForm': 'updateTitle'
  },
  initialize: function() {
    this.render();
  },
  render: function() {
    var kpt = this.model;
    this.$el.html('<h1 class="kptTitleText text-center">' + kpt.get('title') + '</h1>');
  },
  editTitle: function() {
    var kpt = this.model;

    this.$el.html('');
    $('#kptTitleForm').tmpl({
      'title': kpt.get('title')
    }).appendTo(this.$el);
  },
  updateTitle: function() {
    var kpt = this.model;
    kpt.set('title', this.$('.inputKptTitle').val());
    kpt.save(null, {
      success: _.bind(function(kpt) {
        this.model = kpt;
        this.render();
      }, this),
      error: showErrorMessage
    });
    this.render();
    return false;
  }
});

window.KptListView = Parse.View.extend({
  el: '.kptList',
  events: {
    'click .kptDeleteButton': 'deleteKpt'
  },
  render: function() {
    var Kpt = Parse.Object.extend("Kpt");
    var query = new Parse.Query(Kpt);
    query.addDescending('createdAt');
    query.find({
      success: _.bind(function(results) {
        this.$('li').remove();
        _.each(results, function(kpt) {
          this.$('.kptListTemplate').tmpl({
            id: kpt.id,
            title: kpt.get('title'),
            createdAt: kpt.createdAt
          }).appendTo(this.$el);
        }, this);
      }, this),
      error: showErrorMessage
    });
  },
  deleteKpt: function(e) {
    if(!window.confirm('削除します。')){
      return true;
    }
    var objectId = $(e.target).data('id');
    var Kpt = Parse.Object.extend("Kpt");
    var kpt = new Kpt();

    kpt.id = objectId;
    kpt.destroy({
      success: _.bind(function() {
        this.render();
      }, this),
      error: showErrorMessage
    })
  }
});

window.CardListView = Parse.View.extend({
  events: {
    'submit .newCardForm': 'newCard',
    'click .deleteCardButton': 'deleteCard',
    'click .moveCardButton': 'moveCard',
    'click .voteCardButton': 'voteCard'
  },

  initialize: function() {
    this.render();
  },

  render: function() {
    var kpt = this.model;
    var label = this.$el.data('label');

    kpt.relation(label).query().addDescending('vote').find({
      success: _.bind(function(results) {
        this.$el.html('');

        this.$el.append('<ul class="list-group"></ul>');
        var $ul = this.$('ul');
        var $cardListTemplate = $('#cardListTemplate');
        var moveTo = null;
        var moveToLabel = null;
        if (label == 'try') {
          moveTo = 'keep';
          moveToLabel = 'Keep';
        }
        _.each(results, function(card) {
          $cardListTemplate.tmpl({
            cardid: card.id,
            title: card.get('title'),
            vote: card.get('vote'),
            moveTo: moveTo,
            moveToLabel: moveToLabel
          }).appendTo($ul);
        }, this);

        $('#newCardFormTemplate').tmpl().appendTo(this.$el);

      }, this)
    });
  },

  newCard: function() {
    var kpt = this.model;
    var label = this.$el.data('label');
    var title = this.$('.inputCardTitle').val();

    var Card = Parse.Object.extend("Card");
    var card = new Card();

    card.set('createdBy', currentUser);
    card.set('title', title);
    card.set('vote', 0);

    card.save(null, {
      success: _.bind(function(card) {
        var relation = kpt.relation(label);
        relation.add(card);

        kpt.save(null, {
          success: _.bind(function() {
            this.render();
          }, this),

          error: showErrorMessage
        });
      }, this),

      error: showErrorMessage
    });
    return false;
  },

  voteCard: function(e) {
    var vote = Number($(e.target).data('vote'));
    var objectId = $(e.target).data('cardid');

    var Card = Parse.Object.extend("Card");
    var query = new Parse.Query(Card);

    query.equalTo('objectId', objectId).first({
      success: _.bind(function(card) {
        var v = card.get('vote');
        v = v + vote;
        card.set('vote', v);
        card.save(null, {
          success: _.bind(function() {
            this.render();
          }, this),
          error: showErrorMessage
        });
      }, this),
    });
  },

  deleteCard: function(e) {
    if(!window.confirm('削除します。')){
      return true;
    }
    var kpt = this.model;
    var label = this.$el.data('label');
    var relation = kpt.relation(label);
    var objectId = $(e.target).data('cardid');

    var Card = Parse.Object.extend("Card");
    var query = new Parse.Query(Card);

    query.equalTo('objectId', objectId).first({
      success: _.bind(function(card) {
        relation.remove(card);

        kpt.save(null, {
          success: _.bind(function() {
            this.render();
          }, this),

          error: showErrorMessage
        });
      }, this),

      error: showErrorMessage
    });
  },
  moveCard: function(e) {
    var kpt = this.model;
    var label = this.$el.data('label');
    var moveTo = $(e.target).data('moveto');
    var relationFrom = kpt.relation(label);
    var relationTo = kpt.relation(moveTo);
    var objectId = $(e.target).data('cardid');

    if(!window.confirm($(e.target).text() + 'に移動します。')){
      return true;
    }

    var Card = Parse.Object.extend("Card");
    var query = new Parse.Query(Card);

    query.equalTo('objectId', objectId).first({
      success: _.bind(function(card) {
        relationFrom.remove(card);
        relationTo.add(card);

        kpt.save(null, {
          success: _.bind(function() {
            renderAllListView();
          }, this),

          error: showErrorMessage
        });
      }, this),

      error: showErrorMessage
    });
  }
});

window.KptMarkdownView = Parse.View.extend({
  el: '.kptMarkdown',
  events: {
    'click .kptMarkdownButton': 'render'
  },

  render: function() {
    var kpt = this.model;
    var cards = {
      Keep: null, Problem: null, Try: null
    };

    kpt.relation('keep').query().addDescending('vote').find({
      success: _.bind(function(results) {
        cards.Keep = results;
        if (cards.Keep && cards.Problem && cards.Try) {
          this.renderMarkdown(cards);
        }
      }, this),
      error: showErrorMessage
    });

    kpt.relation('problem').query().addDescending('vote').find({
      success: _.bind(function(results) {
        cards.Problem = results;
        if (cards.Keep && cards.Problem && cards.Try) {
          this.renderMarkdown(cards);
        }
      }, this),
      error: showErrorMessage
    });

    kpt.relation('try').query().addDescending('vote').find({
      success: _.bind(function(results) {
        cards.Try = results;
        if (cards.Keep && cards.Problem && cards.Try) {
          this.renderMarkdown(cards);
        }
      }, this),
      error: showErrorMessage
    });

    $('.bs-modal-lg').modal();
  },
  renderMarkdown: function(cards) {
    var kpt = this.model;
    var md = '# ' + kpt.get('title') + "\n\n";

    _.each(cards, function(list, label) {
      md += '## ' + label + ' [' + list.length + ']' + "\n\n";
      _.each(list, function(card) {
        md += '- ' + card.get('title') + ' ' + card.get('vote') + "\n";
      }, this);
      md += "\n";
    }, this);

    this.$('.kptMarkdownText').html(md);
  }
});
